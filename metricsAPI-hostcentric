import requests
import pandas as pd
from openpyxl import Workbook
from datetime import datetime
import logging

# Configure logging
logging.basicConfig(
    filename=f"metrics_debug_{datetime.now().strftime('%Y%m%d%H%M%S')}.log",
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Metrics to query
metrics = {
    "Processor": "builtin:host.cpu.usage",
    "Memory": "builtin:host.mem.usage",
    "Average Disk Used Percentage": "builtin:host.disk.usedPct",
    "Average Disk Utilization Time": "builtin:host.disk.utilTime",
    "Disk Write Time Per Second": "builtin:host.disk.writeTime",
    "Average Disk Queue Length": "builtin:host.disk.queueLength",
    "Network Adapter In": "builtin:host.net.nic.trafficIn",
    "Network Adapter Out": "builtin:host.net.nic.trafficOut"
}

def fetch_metrics(api_url, headers, metric_selector, entity_filter, start_time):
    """
    Fetches metrics from Dynatrace using the Metrics API.
    """
    url = f"{api_url}?metricSelector={metric_selector}&from={start_time}&entitySelector={entity_filter}"
    logging.debug(f"Fetching data from URL: {url}")
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()

def resolve_hostnames(api_url, headers, host_ids):
    """
    Resolves hostnames for a list of host IDs using the Dynatrace Entities API.
    """
    base_url = api_url.split("metrics/query")[0]  # Base API URL
    hostnames = {}
    for host_id in host_ids:
        url = f"{base_url}/entities/{host_id}"
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            entity_data = response.json()
            hostnames[host_id] = entity_data.get("displayName", host_id)  # Fallback to host_id if no displayName
        except requests.exceptions.RequestException as e:
            logging.error(f"Error resolving hostname for {host_id}: {e}")
            hostnames[host_id] = host_id  # Fallback to host_id on error
    return hostnames

def generate_excel_report(aggregated_data, hostnames, output_filename):
    """
    Generates an Excel report with one sheet per host.
    """
    workbook = Workbook()
    report_summary = workbook.active
    report_summary.title = "Report Summary"
    report_summary.append(["Host", "Hostname"])
    for host_id, hostname in hostnames.items():
        report_summary.append([host_id, hostname])

    for host_id, metrics_data in aggregated_data.items():
        sheet = workbook.create_sheet(title=hostnames.get(host_id, host_id)[:31])
        sheet.append(["Metric", "Time", "Value"])
        for metric_name, data_points in metrics_data.items():
            for timestamp, value in data_points:
                sheet.append([metric_name, timestamp, value])

    workbook.save(output_filename)
    logging.info(f"Excel report saved to {output_filename}")

def main():
    # User inputs
    api_url = input("Enter the Dynatrace Metrics API URL: ").strip()
    api_token = input("Enter your API Token: ").strip()
    start_time = input("Enter the start time (e.g., now-1w): ").strip()

    headers = {
        "Authorization": f"Api-Token {api_token}",
        "Accept": "application/json; charset=utf-8"
    }

    entity_filter = 'type("HOST")'

    # Fetch metrics data
    aggregated_data = {}
    all_host_ids = set()

    for metric_name, metric_selector in metrics.items():
        logging.info(f"Fetching data for metric: {metric_name}")
        metric_data = fetch_metrics(api_url, headers, metric_selector, entity_filter, start_time)
        for result in metric_data.get("result", []):
            for data_point in result.get("data", []):
                host_id = data_point.get("dimensions", ["Unknown"])[0]
                all_host_ids.add(host_id)
                if host_id not in aggregated_data:
                    aggregated_data[host_id] = {}
                if metric_name not in aggregated_data[host_id]:
                    aggregated_data[host_id][metric_name] = []
                timestamps = data_point.get("timestamps", [])
                values = data_point.get("values", [])
                aggregated_data[host_id][metric_name].extend(zip(timestamps, values))

    # Resolve hostnames
    logging.info("Resolving hostnames...")
    hostnames = resolve_hostnames(api_url, headers, all_host_ids)

    # Generate Excel report
    output_filename = f"Host_Centric_Dynatrace_Report_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
    logging.info("Generating Excel report...")
    generate_excel_report(aggregated_data, hostnames, output_filename)
    print(f"Report saved to {output_filename}")

if __name__ == "__main__":
    main()
