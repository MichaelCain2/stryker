import requests
import pandas as pd
from openpyxl import Workbook
from datetime import datetime

def fetch_metrics(api_url, headers, metric, entity_filter, mz_selector, start_time):
    """
    Fetches metrics from Dynatrace using the Metrics API.
    """
    url = f"{api_url}?metricSelector={metric}&from={start_time}&entitySelector={entity_filter}&mzSelector={mz_selector}"
    print(f"Fetching data from URL: {url}")
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()

def resolve_hostnames(api_url, headers, host_ids):
    """
    Resolve host IDs to human-readable hostnames.
    """
    resolved_names = {}
    for host_id in host_ids:
        url = f"{api_url}/entities/{host_id}"
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            resolved_names[host_id] = response.json().get("displayName", host_id)
        except requests.exceptions.RequestException:
            resolved_names[host_id] = host_id
    return resolved_names

def generate_excel_report(data, resolved_hostnames, output_filename):
    """
    Generate an Excel report with one sheet per HOST containing all its metrics.
    """
    workbook = Workbook()
    workbook.remove(workbook.active)  # Remove default sheet

    for host_id, metrics_data in data.items():
        hostname = resolved_hostnames.get(host_id, host_id)
        sheet = workbook.create_sheet(title=hostname[:31])
        sheet.append(["Metric", "Time", "Value"])

        for metric_name, metric_values in metrics_data.items():
            for time, value in metric_values:
                sheet.append([metric_name, time, value])

    workbook.save(output_filename)
    print(f"Excel report saved to {output_filename}")

def main():
    print("Enter Dynatrace API Details:")
    api_base_url = input("Enter the Dynatrace Metrics API URL: ").strip()
    api_token = input("Enter your API Token: ").strip()
    management_zone = input("Enter the Management Zone (e.g., ABC: VASI_1234): ").strip()
    start_time = input("Enter the start time (e.g., now-1w): ").strip()

    headers = {
        "Authorization": f"Api-Token {api_token}",
        "Accept": "application/json; charset=utf-8"
    }

    metrics = {
        "Processor": "builtin:host.cpu.usage",
        "Memory": "builtin:host.mem.usage",
        "Average Disk Used Percentage": "builtin:host.disk.usedPct",
        "Average Disk Utilization Time": "builtin:host.disk.utilTime",
        "Disk Write Time Per Second": "builtin:host.disk.writeTime",
        "Average Disk Queue Length": "builtin:host.disk.queueLength",
        "Network Adapter In": "builtin:host.net.nic.trafficIn",
        "Network Adapter Out": "builtin:host.net.nic.trafficOut"
    }

    entity_filter = 'type("HOST")'
    mz_selector = f'mzName("{management_zone}")'

    data = {}
    all_host_ids = set()

    for metric_name, metric_selector in metrics.items():
        print(f"Fetching data for {metric_name}...")
        metric_data = fetch_metrics(api_base_url, headers, metric_selector, entity_filter, mz_selector, start_time)

        for result in metric_data.get("result", []):
            for data_point in result.get("data", []):
                host_id = data_point.get("dimensions", ["Unknown"])[0]
                all_host_ids.add(host_id)

                if host_id not in data:
                    data[host_id] = {}
                if metric_name not in data[host_id]:
                    data[host_id][metric_name] = []

                timestamps = data_point.get("timestamps", [])
                values = data_point.get("values", [])
                data[host_id][metric_name].extend(zip(timestamps, values))

    print("Resolving hostnames...")
    resolved_hostnames = resolve_hostnames(api_base_url, headers, all_host_ids)

    output_filename = "Dynatrace_Host_Report.xlsx"
    print("Generating the Excel report...")
    generate_excel_report(data, resolved_hostnames, output_filename)

if __name__ == "__main__":
    main()
