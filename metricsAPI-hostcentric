import requests
import json
import logging
from openpyxl import Workbook
from datetime import datetime
from tkinter import Tk, filedialog
import os

# Configure logging
log_filename = f"metrics_debug_{datetime.now().strftime('%Y%m%d%H%M%S')}.log"
logging.basicConfig(filename=log_filename, level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def fetch_metrics(api_url, headers, metric, entity_filter, management_zone, start_time):
    """
    Fetch metrics data from Dynatrace using the Metrics API.
    """
    url = f"{api_url}?metricSelector={metric}&from={start_time}&entitySelector={entity_filter}&mzSelector=mzName(\"{management_zone}\")"
    logging.debug(f"Fetching data from URL: {url}")
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()

def fetch_host_name(api_url, headers, host_id):
    """
    Fetch the human-readable hostname for a given host ID.
    """
    base_url = api_url.split("metrics/query")[0]
    url = f"{base_url}/entities/{host_id}"
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        entity_data = response.json()
        display_name = entity_data.get("displayName", host_id)
        logging.debug(f"Resolved {host_id} to {display_name}")
        return display_name
    except requests.exceptions.RequestException as e:
        logging.warning(f"Error fetching display name for {host_id}: {e}")
        return host_id

def generate_excel_report(aggregated_data, management_zone, start_time, output_filename):
    """
    Generate a host-centric Excel report with the metrics data.
    """
    workbook = Workbook()
    title_sheet = workbook.active
    title_sheet.title = "Report Summary"
    report_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    title_content = [
        f"Management Zone: {management_zone}",
        f"Report Time: {report_time}",
        f"Start Time: {start_time}"
    ]
    for idx, line in enumerate(title_content, start=1):
        title_sheet.cell(row=idx, column=1, value=line)

    for host, metrics_data in aggregated_data.items():
        sheet = workbook.create_sheet(title=host[:31])
        sheet.cell(row=1, column=1, value="Metric")
        sheet.cell(row=1, column=2, value="Time")
        sheet.cell(row=1, column=3, value="Value")

        row_idx = 2
        for metric_name, data_points in metrics_data.items():
            for timestamp, value in data_points:
                sheet.cell(row=row_idx, column=1, value=metric_name)
                sheet.cell(row=row_idx, column=2, value=timestamp)
                sheet.cell(row=row_idx, column=3, value=value)
                row_idx += 1

    workbook.save(output_filename)
    logging.info(f"Excel report saved to {output_filename}")

def aggregate_metric_data(metric_data, metric_name, headers, api_url):
    """
    Aggregate metrics data and resolve hostnames.
    """
    aggregated = {}
    for result in metric_data.get("result", []):
        for data_point in result.get("data", []):
            host_id = data_point.get("dimensions", ["Unknown"])[0]
            timestamps = data_point.get("timestamps", [])
            values = data_point.get("values", [])
            if not timestamps or not values:
                continue

            if host_id not in aggregated:
                display_name = fetch_host_name(api_url, headers, host_id)
                aggregated[display_name] = {}
            if metric_name not in aggregated[display_name]:
                aggregated[display_name][metric_name] = []

            aggregated[display_name][metric_name].extend(zip(timestamps, values))
    return aggregated

def main():
    Tk().withdraw()
    print("Enter Dynatrace API Details:")
    api_url = input("Enter the Dynatrace Metrics API URL: ").strip()
    api_token = input("Enter your API Token: ").strip()
    management_zone = input("Enter the Management Zone: ").strip()
    start_time = input("Enter the start time (e.g., now-1w): ").strip()

    headers = {
        "Authorization": f"Api-Token {api_token}",
        "Accept": "application/json; charset=utf-8"
    }

    metrics = {
        "Processor": "builtin:host.cpu.usage",
        "Memory": "builtin:host.mem.usage",
        "Average Disk Used Percentage": "builtin:host.disk.usedPct",
        "Average Disk Utilization Time": "builtin:host.disk.utilTime",
        "Disk Write Time Per Second": "builtin:host.disk.writeTime",
        "Average Disk Queue Length": "builtin:host.disk.queueLength",
        "Network Adapter In": "builtin:host.net.nic.trafficIn",
        "Network Adapter Out": "builtin:host.net.nic.trafficOut"
    }

    aggregated_data = {}
    for metric_name, metric_selector in metrics.items():
        logging.info(f"Fetching data for {metric_name}...")
        metric_data = fetch_metrics(api_url, headers, metric_selector, 'type("HOST")', management_zone, start_time)
        metric_aggregated = aggregate_metric_data(metric_data, metric_name, headers, api_url)
        for host, metrics in metric_aggregated.items():
            if host not in aggregated_data:
                aggregated_data[host] = {}
            aggregated_data[host].update(metrics)

    output_filename = f"{management_zone.replace(':', '_')}_Host_Centric_Report_{datetime.now().strftime('%Y%m%d')}.xlsx"
    print("Generating Excel report...")
    generate_excel_report(aggregated_data, management_zone, start_time, output_filename)

if __name__ == "__main__":
    main()
