from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from io import BytesIO
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime
from tkinter import Tk, filedialog


def create_chart(chart_data, title, metric_name):
    """
    Create a line chart for a given metric and save it to a BytesIO stream.
    """
    plt.figure(figsize=(8, 4))
    plt.plot(chart_data['Time'], chart_data[metric_name], marker='o', linestyle='-', color='blue', label=metric_name)
    plt.title(title)
    plt.xlabel('Time')
    plt.ylabel(metric_name)
    plt.xticks(rotation=45, ha='right')
    plt.grid(True)
    plt.legend()

    chart_stream = BytesIO()
    plt.tight_layout()
    plt.savefig(chart_stream, format='png')
    plt.close()

    chart_stream.seek(0)
    return chart_stream


def generate_pdf_report(aggregated_data, management_zone, output_filename):
    """
    Generate a PDF report with a title block and embedded line charts for each host.
    """
    pdf = SimpleDocTemplate(output_filename, pagesize=letter)
    elements = []

    styles = getSampleStyleSheet()
    title_style = styles['Heading2']
    text_style = styles['Normal']

    # Generate the title block
    report_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    title_block = [
        Paragraph(f"<b>Team Name/Management Zone:</b> {management_zone}", text_style),
        Paragraph(f"<b>Report Time:</b> {report_time}", text_style),
        Spacer(1, 24)
    ]
    elements.extend(title_block)

    for host, df in aggregated_data.items():
        elements.append(Paragraph(f"<b>{host}</b>", style=title_style))
        elements.append(Spacer(1, 24))

        for metric_name in df.columns:
            if metric_name not in ['Time']:
                chart_stream = create_chart(df, f"{metric_name} Trend for {host}", metric_name)
                img = Image(chart_stream, width=500, height=250)
                elements.append(img)
                elements.append(Spacer(1, 24))

    pdf.build(elements)
    print(f"PDF report saved to {output_filename}")


def aggregate_data_from_workbook(file_path):
    """
    Read the existing Excel file and aggregate data for each host.
    """
    df_dict = pd.read_excel(file_path, sheet_name=None)
    aggregated_data = {}

    for sheet_name, df in df_dict.items():
        if 'Time' in df.columns:
            aggregated_data[sheet_name] = df

    return aggregated_data


def main():
    Tk().withdraw()
    print("Please select the existing Dynatrace report file (Excel).")
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    if not file_path:
        print("No file selected. Exiting...")
        return

    management_zone = input("Enter the Management Zone: ").strip()
    output_filename = f"{management_zone.replace(':', '').replace(' ', '_')}-Aggregated_Dynatrace_Report-{datetime.now().strftime('%Y%m%d')}.pdf"

    print("Aggregating data from the existing report...")
    aggregated_data = aggregate_data_from_workbook(file_path)

    print("Generating the PDF report...")
    generate_pdf_report(aggregated_data, management_zone, output_filename)
    print(f"Report saved to {output_filename}")


if __name__ == "__main__":
    main()
